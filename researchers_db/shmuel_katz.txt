Recent papers for Shmuel Katz:

2020: Boomerons in a 1-D lattice with only nearest-neighbor interactions
Abstract: We report on the existence of boomerons in a 1-D periodic lattice with no on-site potentials. Following an impact, a spatially localized wave phenomenon forms. This envelope wave packet, with frequency within the propagating band of small-amplitude waves, propagates into the chain, decelerates, and reverses direction without any external forcing. Our results show that this remarkable response requires the nearest-neighbor interactions to have non-convex potential with a branch of negative stiffness. It is suggested that the reversing motion is a consequence of the intriguing interaction between the localized phenomenon and the trail of nonlinear waves behind it.

2019: Solitary waves in a nonintegrable chain with double-well potentials.
Abstract: We study solitary waves in a one-dimensional lattice of identical masses that are connected in series by nonlinear springs. The potential of each spring is nonconvex, where two disjoint convex regions, phase I and phase II, are separated by a concave, spinodal region. Consequently, the force-strain relation of the spring is nonmonotonous, which gives rise to a bistable behavior. Based on analytical treatment, with some approximations, combined with extensive numerical simulations, we are able to reveal important insights. For example, we find that the solitary-wave solution is indifferent to the energy barrier that separates the two energy wells associated with phase I and phase II, and that the shape of the wave can be described by means of merely two scalar properties of the potential of the springs, namely, the ratio of stiffness in phase II and phase I, and the ratio between the Maxwell's force and corresponding transition strain. The latter ratio provides a useful measure for the significance of the spinodal region. Linear stability of the solitary-wave solution is studied analytically using the Vakhitov-Kolokolov criterion applied to the approximate solutions obtained in the first part. These results are validated by numerical simulations. We find that the solitary-wave solution is stable provided that its velocity is higher than some critical value. It is shown that, practically, the solitary waves are stable for almost the entire range of possible wave velocities. This is also manifested in the interaction between two solitary waves or between a solitary wave and a wall (rigid boundary). Such interaction results in a minor change of height and shape of the solitary wave along with the formation of a trail of small undulations that follow the wave, as expected in a nonintegrable system. Even after a significant number of interactions the changes in the wave height and shape are minor, suggesting that the bistable chain may be a useful platform for delivering information over long distances, even concurrently with additional information (other solitary waves) passing through the chain.

2018: Solitary waves in a bistable lattice
Abstract: None

2017: The Postbuckling Behavior of Planar Elastica Constrained by a Deformable Wall
Abstract: None

2016: Developing and Verifying Response Specifications in Hierarchical Event-Based Systems
Abstract: None

2015: A Framework for Translating Models and Speci
Abstract: The reasons for translating a description of a model in one notation into another are reviewed This includes both translating en tire models and describing di erent aspects of a system using di erent notations In order to demonstrate the ideas the VeriTech framework for translation is described A system being analyzed is seen as a collection of versions along with a description of how the versions are related The versions are given in di erent notations connected through a core notation by compil ers from and to the notations of existing tools and speci cation methods The reasons that translations cannot always be exact are analyzed based on experience with over ten separate compiler translations among formal methods notations Additional information gathered during translation is described to facilitate optimizations error tracing and analysis The concept is presented of a faithful relation among models and families of properties true of those models In this framework families of prop erties are provided with uniform syntactic transformations in addition to the translations of the models This framework is shown appropriate for common instances of relations among translations previously treated in an ad hoc way The classes of properties that can be faithful for a given translation provide a measure of the usefulness of the translation Open research directions are suggested concerning faithful transforma tions additional information error tracing and optimizing translations

2015: Proving mutual termination
Abstract: None

2015: The post-buckling behavior of a beam constrained by springy walls
Abstract: None

2014: A tool-supported approach for modular design of energy-aware software
Abstract: The reduction of energy usage by software-controlled systems has many advantages, including prolonged battery life and reduction of greenhouse gas emissions. Thus, being able to implement energy optimization in software is essential. This requires a model of the energy utilization---or more general resource utilization---for each component in the system. Optimizer components, then, analyze resource utilization of other components in terms of such a model and adapt their behavior accordingly. We have devised a notation for Resource-Utilization Models (RUMs) that can be part of a component's application programming interface (API) to facilitate the modular implementation of optimizers. In this paper, we present tools for extracting such RUMs from components with an existing implementation.

2014: Language Constructs for Distributed Systems Language Constructs for Distributed Systems Language Constructs for Distributed Systems Language Constructs for Distributed Systems Language Constructs for Distributed Systems Language Constructs for Distributed Systems
Abstract: Three language constructs appropriate for the design and pro­ gramming of distributed systems are described. The team abstracts repeated interprocess activities and isolates processes to the context where they are needed. The interaction provides multiparty synchronization and communi­ cation. The superimposition defines modules that augment existing teams. Partial correctness proof rules and criteria for correctness-preserving transformations are given. These allow replacing one construct by others during design in order to reduce synchronization and extraneous communi­ cation.

2013: Deriving minimal models for resource utilization
Abstract: We show how compact Resource Utilization Models (RUMs) can be extracted from concrete overly-detailed models of systems or sub-systems in order to model energy-aware software. Using the Counterexample-Guided Abstraction Refinement (CEGAR) approach, along with model-checking tools, abstract models can be generated that help establish key properties relating to energy consumption. This approach is illustrated by the concrete example of a network manager sub-system. This work is part of an overall design methodology for energy-aware software.

2013: Interleaving Set Temporal Logic T
Abstract: A new temporal logic and interpretation are suggested which have features from linear temporallogic, branching time temporal logic, and partial order temporal logic. The new logic can describe properties essential to the specification and correctness proofs of distributed algorithms such as those for global snapshots. It is also appropriate for the justification of proof rules and ascribing temporal semantics to properties such as layering of a program. These properties cannot be described with existing temporal logics. The semantic model of the logic is based on a collection of sets of interleaving sequences which reflect partial orders from the underlying semantics of the computational model. For the common partial order derived from sequentiality in execution of each process, the logic will distinguish between nondeterminism due to the parallel execution and nondeterminism due to local nondeterministic choices. The difference in expressive power is thus qualitative, and not merely due to the presence or absence of a particular temporal operator. In the logic. theorems are proven which clarify when it is possible to establish a property P for some of the interleaving computations, and yet conclude the truth of P for every interleaving. t A prdiminary veniOll of this wodc appear1ld in the Proceedings of the Sixth ACM Symposium OIl Principles of Distributed Computing. Vancouver. Canada. August 1987, pages 178-190. T ec hn io n C om pu te r Sc ie nc e D ep ar tm en t T eh ni ca l R ep or t C S0 50 5 19 88

2013: Specification and verification of event detectors and responses
Abstract: Events and aspects that respond to them can and should be defined, specified, and verified in a modular way, as an aid in understanding and guaranteeing the correctness of each on its own. However, finding the appropriate interfaces and abstractions and expressing them precisely is not an easy task. Moreover, formally verifying large models is often unfeasible for existing model-checking tools.
 We present an abstraction refinement scheme to verify aspects and to define and correct both aspect and event specifications. This allows considering smaller models and learning the needed event guarantees at each step. In addition, this technique can be used to find sound abstractions to check event reachability. Moreover, the technique is applied for detecting interference in systems where there are responses to complex events and aspects may be activated within the execution of other aspects.

2012: Proving Mutual Termination of Programs
Abstract: None

2012: Proceedings of the eleventh workshop on Foundations of Aspect-Oriented Languages, FOAL 2012, Potsdam, Germany, March 25-30, 2012
Abstract: Aspect-oriented programming is a paradigm in software engineering and programming languages that promises better support for separation of concerns. The Foundations of Aspect-Oriented Languages (FOAL) workshop was held at the Eleventh International Conference on Aspect-Oriented Software Development in Potsdam, Germany, on March 26, 2012. This workshop was designed to be a forum for research in formal foundations of aspectoriented programming languages. The call for papers announced the areas of interest for FOAL as including: semantics of aspect-oriented languages, specification and verification for such languages, type systems, static analysis, theory of testing, theory of aspect composition, and theory of aspect translation (compilation) and rewriting. The call for papers welcomed all theoretical and foundational studies of foundations of aspect-oriented languages. 
 
The goals of this FOAL workshop were to: 
Make progress on the foundations of aspect-oriented programming languages. 
Exchange ideas about semantics and formal methods for aspect-oriented programming languages. 
Foster interest within the programming language theory and types communities in aspectoriented programming languages. 
Foster interest within the formal methods community in aspect-oriented programming and the problems of reasoning about aspect-oriented programs. 
 
 
 
The workshop was organized by Shmuel Katz (Technion-Israel Institute of Technology, Israel), Gary T. Leavens (University of Central Florida, USA), and Hidehiko Masuhara (University of Tokyo, Japan). 
 
We are very grateful to the program committee, which was chaired very ably by Hidehiko Masuhara. 
 
The keynote talk this year is by Eric Bodden, describing his important work on typesafe weaving and modularity. The regular papers have been divided into three sessions, roughly concerning scoping and modularity, flexible semantic analysis and implementation, and applying aspect concepts to modelling and testing stages.

2012: A closer look at aspect interference and cooperation
Abstract: In this work we consider specification and compositional verification for interference detection when several aspects are woven together under joint-weaving semantics without recursion. In this semantics, whenever a joinpoint of an aspect is reached, the corresponding advice is begun even if the joinpoint is inside the advice of other aspects. This captures most of the possible aspect interference cases in AspectJ. Moreover, the given technique is used to capture cooperation among aspects, which enhances modularity. The extended specification and proof obligations should provide insight to the possible interactions among aspects in a reusable library.

2011: Transactions on Aspect-Oriented Software Development VIII
Abstract: None

2011: Compositional verification of events and observers: (summary)
Abstract: By distinguishing between events and aspects, it is possible to separate the problem of identifying when an aspect should be applied, from what it must do. Observers (aspects that do not affect the state of the base system) are already part of aspect-oriented programming and language support is emerging for events that gather information and announce occurrence. The goal of compositional verification of events and observers is to prove that they are correct so that their guarantees may be used by other events or aspects. Moreover, a compositional verification model allows applying formal verification techniques in smaller models, and also building a library of events, in which for any base system that satisfies certain assumptions, the event detection will satisfy its guarantees. In this work compositional verification of events and observers will be defined to aid in the design of a framework that allows users to verify events, providing as well flexibility in the input language of the specification

2011: Verification of Safety-Critical Systems: A Case Study Report on Using Modern Model Checking Tools
Abstract: paper, we describe a case study where a simple 2oo3 voting scheme for a shutdown system was verified using two bounded model checking tools, CBMC and EBMC. The system represents Systematic Capability level 3 according to IEC 61508 ed2.0. The verification process was based on requirements and pseudo code, and involved verifying C and Verilog code implementing the pseudo code. The results suggest that the tools were suitable for the task, but require considerable 
training to reach productive use for code embedded in industrial equipment. We also identified some issues in the development process that could be streamlined with the use of more formal verification methods. Towards the end of the paper, we discuss the issues we found and how to address them in a practical setting.

2011: Making aspects natural: events and composition
Abstract: Language extensions are proposed to make aspects more natural for programmers. The extensions involve two main elements: (1) Completely separating the identification of events and locally accumulating information about them from any possible response to the events, and (2) composing both events and aspects into hierarchies that loosen the connection to code-level methods and field names. The combination of these extensions are shown (in preliminary experiments) to increase modularity, and facilitate using terminology natural for each concern. Extensions to AspectJ and Compose* are shown to illustrate how the concepts can be easily embodied in particular languages. The execution model of ALIA4J is used to present the concepts in a language-independent way, providing a prototype generic implementation of the extensions, that can be used to implement them for both AspectJ and Compose*. The extensions increase the flexibility of aspects, encourage reuse, and allow expressing events and responses to them in terms natural to the concern that an aspect treats.

