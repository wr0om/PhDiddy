Recent papers for Orna Grumberg:

2024: CTL* Verification and Synthesis using Existential Horn Clauses
Abstract: This work proposes a novel approach for automatic verification and synthesis of infinite-state reactive programs with respect to ${CTL}^*$ specifications, based on translation to Existential Horn Clauses (EHCs). $CTL^*$ is a powerful temporal logic, which subsumes the temporal logics LTL and CTL, both widely used in specification, verification, and synthesis of complex systems. EHCs with its solver E-HSF, is an extension of Constrained Horn Clauses, which includes existential quantification as well as the power of handling well-foundedness. We develop the translation system \textit{Trans}, which given a verification problem consisting of a program $P$ and a specification $\phi$, builds a set of EHCs which is satisfiable iff $P$ satisfies $\phi$. We also develop a synthesis algorithm that given a program with holes in conditions and assignments, fills the holes so that the synthesized program satisfies the given $CTL^*$ specification. We prove that our verification and synthesis algorithms are both sound and relative complete. Finally, we present case studies to demonstrate the applicability of our algorithms for $CTL^*$ verification and synthesis.

2023: Condition Synthesis Realizability via Constrained Horn Clauses
Abstract: None

2023: Structure-Guided Solution of Constrained Horn Clauses
Abstract: None

2023: PISE: Protocol Inference using Symbolic Execution and Automata Learning
Abstract: —Protocol Inference is the process of gaining information about a protocol from a binary code that implements it. This process is useful in cases such as extraction of the command and control protocol of a malware, uncovering security vulnerabilities in a network protocol implementation or verifying conformance to the protocol’s standard. Protocol inference usually involves time-consuming work to manually reverse engineer the binary code. We present a novel method to automatically infer state machine of a network protocol and its message formats directly from the binary code. To the best of our knowledge, this is the first method to achieve this solely based on a binary code of a single peer. We do not assume any of the following: access to a remote peer, access to captures of the protocol’s traffic, and prior knowledge of message formats. The method leverages extensions to symbolic execution and novel modifications to automata learning. We validate the proposed method by inferring real-world protocols including the C&C protocol of Gh0st RAT, a well-known malware.

2022: Edmund Melson Clarke, Jr. (1945–2020)
Abstract: None

2022: Automated Program Repair Using Formal Verification Techniques
Abstract: None

2022: Assume, guarantee or repair: a regular framework for non regular properties
Abstract: None

2021: Compositional Model Checking for Multi-properties
Abstract: None

2020: Assume, Guarantee or Repair
Abstract: None

2020: Must Fault Localization for Program Repair
Abstract: None

2019: Assume , Guarantee or Repair Student submission
Abstract: We present Assume-Guarantee-Repair (AGR) – a novel framework which not only verifies that a program is error-free, but also repairs the program, in case the verification fails. We consider simple C-like programs, extended with synchronous communication actions over communication channels. Our method uses compositional approach to modularly check the system for errors, and to repair it. We fulfill the two tasks simultaneously: in every iteration of the procedure, we either make another step towards proving safety of the (current) system, or remove the current vulnerability in a way that brings it closer to being safe. We manage to handle infinite-state systems by using a finite abstract representation. We describe our method and demonstrate the effectiveness of AGR on several examples using existing SMT solvers, learning, and reachability analysis tools.

2019: Learn Your Program
Abstract: We introduce a synthesis framework for quantifierfree first-order LTL formulas over program variables. Such formulas are natural for specifying security requirements. Our framework uses automata learning to construct the program, as well as Hoare logic in order to reason about the program semantics and abstract the program states. Hoare logic also supply us with a proof of correctness for the program. We aim to learn not only the program, that is, the program states and transitions, but also to infer the program statements using abduction. Since this is an ongoing work, We discuss problems of termination, inference of Hoare predicates, and inference of new program statements. Our algorithm will allow automatically elimination of security vulnerabilities by constructing safe programs.

2019: Applying Machine Learning for Identifying Attacks at Run-Time
Abstract: 1

2019: Topology-Agnostic Runtime Detection of OSPF Routing Attacks
Abstract: Open Shortest Path First (OSPF) is one of the most widely deployed interior gateway routing protocols on the Internet. It allows routers to calculate their routing tables within a cluster of networks - an autonomous system (AS). An attacker that leverages OSPF to attack an AS may have a catastrophic effect on it. A single malicious router within an AS can poison the routing tables of all other routers of that AS by sending false routing messages, thereby subverting the entire routing process. Finding attacks on the routing protocol is a demanding task as the exact nature of the attack may be unknown. In this work we present a machine learning-based attack detection scheme that is based on topology-agnostic features. The topology-agnostic features allow the trained algorithm to find attacks on a broad range of topologies, as well as networks with dynamic topologies. We validate the algorithm both on synthetic AS topologies and on real-world ISP topology and traffic. We show that the presented algorithm achieves high detection accuracy within a very short detection time, while false error rate remains low.

2018: An Automata-Theoretic Approach to Model-Checking Systems and Specifications Over Infinite Data Domains
Abstract: None

2018: Model checking, 2nd Edition
Abstract: None

2018: Poster: Program Repair that Learns from Mistakes
Abstract: Automated program repair is a very active research field, with promising results so far. Several program repair techniques follow a Generate-and-Validate work-scheme: programs are iteratively sampled from within a predefined repair search space, and then checked for correctness to see if they constitute a repair. In this poster, we propose an enhanced work-scheme, called Generate-Validate-AnalyzeErr, in which whenever a program is found to be incorrect, the error trace that is the evidence of the bug is further analyzed to obtain a search hint. This hint improves the sampling process of programs in the future. The effectiveness of this work-scheme is illustrated in a novel technique for program repair, where search hints are generated in a process we call error generalization. The goal of error generalization is to remove from the search space all programs that exhibit the same erroneous behavior. The aim of this poster is to present our vision of the future of program repair, and trigger research in directions that have not been explored so far. We believe that many existing techniques can benefit from our new work-scheme, by focusing attention on what can be learned from failed repair attempts. We hope this poster inspires others and gives rise to further work on this subject.

2018: Modular Verification of Concurrent Programs via Sequential Model Checking
Abstract: None

2018: Abstraction and Abstraction Refinement
Abstract: None

2017: Formal Black-Box Analysis of Routing Protocol Implementations
Abstract: The Internet infrastructure relies entirely on open standards for its routing protocols. However, the majority of routers on the Internet are closed-source. Hence, there is no straightforward way to analyze them. Specifically, one cannot easily identify deviations of a router's routing functionality from the routing protocol's standard. Such deviations (either deliberate or inadvertent) are particularly important to identify since they may degrade the security or resiliency of the network. 
A model-based testing procedure is a technique that allows to systematically generate tests based on a model of the system to be tested; thereby finding deviations in the system compared to the model. However, applying such an approach to a complex multi-party routing protocol requires a prohibitively high number of tests to cover the desired functionality. We propose efficient and practical optimizations to the model-based testing procedure that are tailored to the analysis of routing protocols. These optimizations allow to devise a formal black-box method to unearth deviations in closed-source routing protocols' implementations. The method relies only on the ability to test the targeted protocol implementation and observe its output. Identification of the deviations is fully automatic. 
We evaluate our method against one of the complex and widely used routing protocols on the Internet -- OSPF. We search for deviations in the OSPF implementation of Cisco. Our evaluation identified numerous significant deviations that can be abused to compromise the security of a network. The deviations were confirmed by Cisco. We further employed our method to analyze the OSPF implementation of the Quagga Routing Suite. The analysis revealed one significant deviation. Subsequent to the disclosure of the deviations some of them were also identified by IBM, Lenovo and Huawei in their own products.

